#!/usr/bin/env bash
#
# author: daniel neemann (@zzzeyez)
#
# displays notifications on macos
# requires `ubersicht`

setup() {
	SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
		SOURCE="$(readlink "$SOURCE")"
		[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	dir="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
	cache="$dir/.cache"
	defaults="$dir/.defaults"
	#image="$cache/image.png"
	message="$cache/message"
	if [[ ! -d "$cache" ]] ; then
		mkdir "$cache"
	fi
	# check if ubersicht is running
	ps cax | grep sicht > /dev/null
	if [ $? -eq 0 ]; then
		# stupid umlaut character
		ubersicht="$(ps ax | grep sicht | awk '{print $5}' | head -1 | cut -d/ -f3 | cut -d. -f1)"
		if [[ "$ubersicht" = "UM-LM^Hbersicht" ]] ; then
			ubersicht="Ãœbersicht"
		fi		
	else
		exit
	fi
}

exists() {
    type "$1" &> /dev/null ;
}


#
# use `sed -i '' 's/image.png/image.jpg/g' image.css`
# scss file too
#
# but you will need to change it back and forth
#
# what am i going to tell sed to change when changing it back?
#
# get file extension
# ext=${path##*.}
#
# and everything before it
# path=${path%.*}
# 
# sed -i '' "s/image.*\"/image.$ext\"/g" ~/scripts/xanthia/image.css
#
# probably will need to update clean() too
#
# line 18 defines image as cache/image.png (nvm)
#
icon() {
	path="$1"
	ext="${path##*.}"
	cp "$path" "$cache/image.$ext"
	sed -i '' "s/image.*\"/image.$ext\"/g" "$dir/image.css"
	#if test -e "$path" -a "$(file -b --mime-type $path)" = "image/png"; then
	#	cp "$path" "$image"
	#else
	#	convert "$path" "$image"
	#fi &&
	osascript -e 'tell application "'$ubersicht'" to refresh widget id "xanthia-image-coffee"'
}

notify() {
	echo "$1" > "$message" &&
	osascript -e 'tell application "'$ubersicht'" to refresh widget id "xanthia-message-coffee"'
}

clean() {
	sleep 1s &&
	if [[ -f "$image" ]] ; then
		cp "$defaults/image.png" "$image"
	fi
	if [[ -f "$message" ]] ; then
		cp "$defaults/message" "$message"
	fi
}

help() {
	printf "%s" \
"xanthia: a notification system for macOS

Usage: notify-send [option] [argument]
       [-i 'path/to/image'] [-m 'message']
       
Example: notify-send -m \"file saved\"
         notify-send -i \"~/downloads/img.jpg\" -m \"img.jpg saved\"
	 notify-send -i \"~/downloads/img.jpg\"
	 notify-send \"upload finished\""
}

flags() {
	while getopts m:i:h opt
		do
			case $opt in
			m) notify "$OPTARG"
			;;
			i) icon "$OPTARG"
			;;
			h) help && exit
			;;
			*) help && exit
			;;
		esac
	done
	# if no flags are provided do message
	shift "$((OPTIND-1))" 
	if [ "$1" != "-*" ] && [ "$1" ] ;
	then
		notify "$@"
	fi
}

setup
flags "$@"
#clean 

#########
# TO DO #
#########

# quit using image magick
# use sed -i to switch the stylesheet
